/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

declare namespace DataTypes {
  export type ERC721StructStruct = {
    tokenAddress: PromiseOrValue<string>
    erc721TokenId: PromiseOrValue<BigNumberish>
  }

  export type ERC721StructStructOutput = [string, BigNumber] & {
    tokenAddress: string
    erc721TokenId: BigNumber
  }

  export type NoteStructStruct = {
    characterId: PromiseOrValue<BigNumberish>
    noteId: PromiseOrValue<BigNumberish>
  }

  export type NoteStructStructOutput = [BigNumber, BigNumber] & {
    characterId: BigNumber
    noteId: BigNumber
  }

  export type NoteStruct = {
    linkItemType: PromiseOrValue<BytesLike>
    linkKey: PromiseOrValue<BytesLike>
    contentUri: PromiseOrValue<string>
    linkModule: PromiseOrValue<string>
    mintModule: PromiseOrValue<string>
    mintNFT: PromiseOrValue<string>
    deleted: PromiseOrValue<boolean>
    locked: PromiseOrValue<boolean>
  }

  export type NoteStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    boolean,
    boolean,
  ] & {
    linkItemType: string
    linkKey: string
    contentUri: string
    linkModule: string
    mintModule: string
    mintNFT: string
    deleted: boolean
    locked: boolean
  }

  export type LinkCharactersInBatchDataStruct = {
    fromCharacterId: PromiseOrValue<BigNumberish>
    toCharacterIds: PromiseOrValue<BigNumberish>[]
    data: PromiseOrValue<BytesLike>[]
    toAddresses: PromiseOrValue<string>[]
    linkType: PromiseOrValue<BytesLike>
  }

  export type LinkCharactersInBatchDataStructOutput = [
    BigNumber,
    BigNumber[],
    string[],
    string[],
    string,
  ] & {
    fromCharacterId: BigNumber
    toCharacterIds: BigNumber[]
    data: string[]
    toAddresses: string[]
    linkType: string
  }
}

export interface AbiInterface extends utils.Interface {
  functions: {
    'getLinkingAddress(bytes32)': FunctionFragment
    'getLinkingAddresses(uint256,bytes32)': FunctionFragment
    'getLinkingAnyUri(bytes32)': FunctionFragment
    'getLinkingAnyUris(uint256,bytes32)': FunctionFragment
    'getLinkingCharacterId(bytes32)': FunctionFragment
    'getLinkingCharacterIds(uint256,bytes32)': FunctionFragment
    'getLinkingERC721(bytes32)': FunctionFragment
    'getLinkingERC721s(uint256,bytes32)': FunctionFragment
    'getLinkingLinklistId(bytes32)': FunctionFragment
    'getLinkingLinklistIds(uint256,bytes32)': FunctionFragment
    'getLinkingNote(bytes32)': FunctionFragment
    'getLinkingNotes(uint256,bytes32)': FunctionFragment
    'getNotesByCharacterId(uint256,uint256,uint256)': FunctionFragment
    'initialize(address,address)': FunctionFragment
    'linkCharactersInBatch((uint256,uint256[],bytes[],address[],bytes32))': FunctionFragment
    'linklist()': FunctionFragment
    'web3Entry()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'getLinkingAddress'
      | 'getLinkingAddresses'
      | 'getLinkingAnyUri'
      | 'getLinkingAnyUris'
      | 'getLinkingCharacterId'
      | 'getLinkingCharacterIds'
      | 'getLinkingERC721'
      | 'getLinkingERC721s'
      | 'getLinkingLinklistId'
      | 'getLinkingLinklistIds'
      | 'getLinkingNote'
      | 'getLinkingNotes'
      | 'getNotesByCharacterId'
      | 'initialize'
      | 'linkCharactersInBatch'
      | 'linklist'
      | 'web3Entry',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'getLinkingAddress',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getLinkingAddresses',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getLinkingAnyUri',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getLinkingAnyUris',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getLinkingCharacterId',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getLinkingCharacterIds',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getLinkingERC721',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getLinkingERC721s',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getLinkingLinklistId',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getLinkingLinklistIds',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getLinkingNote',
    values: [PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getLinkingNotes',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>],
  ): string
  encodeFunctionData(
    functionFragment: 'getNotesByCharacterId',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string
  encodeFunctionData(
    functionFragment: 'linkCharactersInBatch',
    values: [DataTypes.LinkCharactersInBatchDataStruct],
  ): string
  encodeFunctionData(functionFragment: 'linklist', values?: undefined): string
  encodeFunctionData(functionFragment: 'web3Entry', values?: undefined): string

  decodeFunctionResult(
    functionFragment: 'getLinkingAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLinkingAddresses',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLinkingAnyUri',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLinkingAnyUris',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLinkingCharacterId',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLinkingCharacterIds',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLinkingERC721',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLinkingERC721s',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLinkingLinklistId',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLinkingLinklistIds',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLinkingNote',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLinkingNotes',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getNotesByCharacterId',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'linkCharactersInBatch',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'linklist', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'web3Entry', data: BytesLike): Result

  events: {}
}

export interface Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: AbiInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    getLinkingAddress(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getLinkingAddresses(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string[]]>

    getLinkingAnyUri(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    getLinkingAnyUris(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { results: string[] }>

    getLinkingCharacterId(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { characterId: BigNumber }>

    getLinkingCharacterIds(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { results: BigNumber[] }>

    getLinkingERC721(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[DataTypes.ERC721StructStructOutput]>

    getLinkingERC721s(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [DataTypes.ERC721StructStructOutput[]] & {
        results: DataTypes.ERC721StructStructOutput[]
      }
    >

    getLinkingLinklistId(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { linklistId: BigNumber }>

    getLinkingLinklistIds(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]] & { linklistIds: BigNumber[] }>

    getLinkingNote(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[DataTypes.NoteStructStructOutput]>

    getLinkingNotes(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [DataTypes.NoteStructOutput[]] & { results: DataTypes.NoteStructOutput[] }
    >

    getNotesByCharacterId(
      characterId: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [DataTypes.NoteStructOutput[]] & { results: DataTypes.NoteStructOutput[] }
    >

    initialize(
      _web3Entry: PromiseOrValue<string>,
      _linklist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    linkCharactersInBatch(
      vars: DataTypes.LinkCharactersInBatchDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    linklist(overrides?: CallOverrides): Promise<[string]>

    web3Entry(overrides?: CallOverrides): Promise<[string]>
  }

  getLinkingAddress(
    linkKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>

  getLinkingAddresses(
    fromCharacterId: PromiseOrValue<BigNumberish>,
    linkType: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string[]>

  getLinkingAnyUri(
    linkKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>

  getLinkingAnyUris(
    fromCharacterId: PromiseOrValue<BigNumberish>,
    linkType: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string[]>

  getLinkingCharacterId(
    linkKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getLinkingCharacterIds(
    fromCharacterId: PromiseOrValue<BigNumberish>,
    linkType: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>

  getLinkingERC721(
    linkKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<DataTypes.ERC721StructStructOutput>

  getLinkingERC721s(
    fromCharacterId: PromiseOrValue<BigNumberish>,
    linkType: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<DataTypes.ERC721StructStructOutput[]>

  getLinkingLinklistId(
    linkKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getLinkingLinklistIds(
    fromCharacterId: PromiseOrValue<BigNumberish>,
    linkType: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>

  getLinkingNote(
    linkKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<DataTypes.NoteStructStructOutput>

  getLinkingNotes(
    fromCharacterId: PromiseOrValue<BigNumberish>,
    linkType: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<DataTypes.NoteStructOutput[]>

  getNotesByCharacterId(
    characterId: PromiseOrValue<BigNumberish>,
    offset: PromiseOrValue<BigNumberish>,
    limit: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<DataTypes.NoteStructOutput[]>

  initialize(
    _web3Entry: PromiseOrValue<string>,
    _linklist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  linkCharactersInBatch(
    vars: DataTypes.LinkCharactersInBatchDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  linklist(overrides?: CallOverrides): Promise<string>

  web3Entry(overrides?: CallOverrides): Promise<string>

  callStatic: {
    getLinkingAddress(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>

    getLinkingAddresses(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string[]>

    getLinkingAnyUri(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>

    getLinkingAnyUris(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string[]>

    getLinkingCharacterId(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingCharacterIds(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>

    getLinkingERC721(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<DataTypes.ERC721StructStructOutput>

    getLinkingERC721s(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<DataTypes.ERC721StructStructOutput[]>

    getLinkingLinklistId(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingLinklistIds(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>

    getLinkingNote(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<DataTypes.NoteStructStructOutput>

    getLinkingNotes(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<DataTypes.NoteStructOutput[]>

    getNotesByCharacterId(
      characterId: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<DataTypes.NoteStructOutput[]>

    initialize(
      _web3Entry: PromiseOrValue<string>,
      _linklist: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    linkCharactersInBatch(
      vars: DataTypes.LinkCharactersInBatchDataStruct,
      overrides?: CallOverrides,
    ): Promise<void>

    linklist(overrides?: CallOverrides): Promise<string>

    web3Entry(overrides?: CallOverrides): Promise<string>
  }

  filters: {}

  estimateGas: {
    getLinkingAddress(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingAddresses(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingAnyUri(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingAnyUris(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingCharacterId(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingCharacterIds(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingERC721(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingERC721s(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingLinklistId(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingLinklistIds(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingNote(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getLinkingNotes(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getNotesByCharacterId(
      characterId: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    initialize(
      _web3Entry: PromiseOrValue<string>,
      _linklist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    linkCharactersInBatch(
      vars: DataTypes.LinkCharactersInBatchDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    linklist(overrides?: CallOverrides): Promise<BigNumber>

    web3Entry(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    getLinkingAddress(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLinkingAddresses(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLinkingAnyUri(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLinkingAnyUris(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLinkingCharacterId(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLinkingCharacterIds(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLinkingERC721(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLinkingERC721s(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLinkingLinklistId(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLinkingLinklistIds(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLinkingNote(
      linkKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getLinkingNotes(
      fromCharacterId: PromiseOrValue<BigNumberish>,
      linkType: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getNotesByCharacterId(
      characterId: PromiseOrValue<BigNumberish>,
      offset: PromiseOrValue<BigNumberish>,
      limit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    initialize(
      _web3Entry: PromiseOrValue<string>,
      _linklist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    linkCharactersInBatch(
      vars: DataTypes.LinkCharactersInBatchDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    linklist(overrides?: CallOverrides): Promise<PopulatedTransaction>

    web3Entry(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
