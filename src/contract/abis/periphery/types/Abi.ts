/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace DataTypes {
  export type LinkProfilesInBatchDataStruct = {
    fromProfileId: BigNumberish;
    toProfileIds: BigNumberish[];
    data: BytesLike[];
    toAddresses: string[];
    linkType: BytesLike;
  };

  export type LinkProfilesInBatchDataStructOutput = [
    BigNumber,
    BigNumber[],
    string[],
    string[],
    string
  ] & {
    fromProfileId: BigNumber;
    toProfileIds: BigNumber[];
    data: string[];
    toAddresses: string[];
    linkType: string;
  };
}

export interface AbiInterface extends utils.Interface {
  functions: {
    "initialize(address)": FunctionFragment;
    "linkProfilesInBatch((uint256,uint256[],bytes[],address[],bytes32))": FunctionFragment;
    "web3Entry()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "initialize" | "linkProfilesInBatch" | "web3Entry"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "linkProfilesInBatch",
    values: [DataTypes.LinkProfilesInBatchDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "web3Entry", values?: undefined): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkProfilesInBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "web3Entry", data: BytesLike): Result;

  events: {};
}

export interface Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      _web3Entry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkProfilesInBatch(
      vars: DataTypes.LinkProfilesInBatchDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    web3Entry(overrides?: CallOverrides): Promise<[string]>;
  };

  initialize(
    _web3Entry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkProfilesInBatch(
    vars: DataTypes.LinkProfilesInBatchDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  web3Entry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    initialize(_web3Entry: string, overrides?: CallOverrides): Promise<void>;

    linkProfilesInBatch(
      vars: DataTypes.LinkProfilesInBatchDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    web3Entry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    initialize(
      _web3Entry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkProfilesInBatch(
      vars: DataTypes.LinkProfilesInBatchDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    web3Entry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      _web3Entry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkProfilesInBatch(
      vars: DataTypes.LinkProfilesInBatchDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    web3Entry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
