/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace DataTypes {
  export type CreateProfileDataStruct = {
    to: string;
    handle: string;
    uri: string;
    linkModule: string;
    linkModuleInitData: BytesLike;
  };

  export type CreateProfileDataStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    to: string;
    handle: string;
    uri: string;
    linkModule: string;
    linkModuleInitData: string;
  };

  export type NoteStruct = {
    linkItemType: BytesLike;
    linklistId: BigNumberish;
    linkKey: BytesLike;
    contentUri: string;
    linkModule: string;
    mintModule: string;
    mintNFT: string;
  };

  export type NoteStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    string
  ] & {
    linkItemType: string;
    linklistId: BigNumber;
    linkKey: string;
    contentUri: string;
    linkModule: string;
    mintModule: string;
    mintNFT: string;
  };

  export type ProfileStruct = {
    profileId: BigNumberish;
    handle: string;
    uri: string;
    noteCount: BigNumberish;
    socialToken: string;
    linkModule: string;
  };

  export type ProfileStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string
  ] & {
    profileId: BigNumber;
    handle: string;
    uri: string;
    noteCount: BigNumber;
    socialToken: string;
    linkModule: string;
  };

  export type ProfileLinkStructStruct = {
    fromProfileId: BigNumberish;
    toProfileId: BigNumberish;
    linkType: BytesLike;
  };

  export type ProfileLinkStructStructOutput = [BigNumber, BigNumber, string] & {
    fromProfileId: BigNumber;
    toProfileId: BigNumber;
    linkType: string;
  };

  export type PostNoteDataStruct = {
    profileId: BigNumberish;
    contentUri: string;
    linkModule: string;
    linkModuleInitData: BytesLike;
    mintModule: string;
    mintModuleInitData: BytesLike;
  };

  export type PostNoteDataStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    string
  ] & {
    profileId: BigNumber;
    contentUri: string;
    linkModule: string;
    linkModuleInitData: string;
    mintModule: string;
    mintModuleInitData: string;
  };
}

export interface AbiInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "attachLinklist(uint256,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "createProfile((address,string,string,address,bytes))": FunctionFragment;
    "createThenLinkProfile(uint256,address,bytes32)": FunctionFragment;
    "detachLinklist(uint256,uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getHandle(uint256)": FunctionFragment;
    "getLinkModule4Address(address)": FunctionFragment;
    "getLinkModule4ERC721(address,uint256)": FunctionFragment;
    "getLinkModule4Linklist(uint256)": FunctionFragment;
    "getLinkingProfileIds(uint256,bytes32)": FunctionFragment;
    "getLinklistContract()": FunctionFragment;
    "getLinklistUri(uint256,bytes32)": FunctionFragment;
    "getNote(uint256,uint256)": FunctionFragment;
    "getPrimaryProfileId(address)": FunctionFragment;
    "getProfile(uint256)": FunctionFragment;
    "getProfileByHandle(string)": FunctionFragment;
    "getProfileUri(uint256)": FunctionFragment;
    "getRevision()": FunctionFragment;
    "initialize(string,string,address,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isPrimaryProfile(uint256)": FunctionFragment;
    "linkAddress(uint256,address,bytes32)": FunctionFragment;
    "linkAny(uint256,string,bytes32)": FunctionFragment;
    "linkERC721(uint256,address,uint256,bytes32)": FunctionFragment;
    "linkLinklist(uint256,uint256,bytes32)": FunctionFragment;
    "linkNote(uint256,uint256,uint256,bytes32)": FunctionFragment;
    "linkProfile(uint256,uint256,bytes32)": FunctionFragment;
    "linkProfileLink(uint256,(uint256,uint256,bytes32),bytes32)": FunctionFragment;
    "mintNote(uint256,uint256,address,bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "postNote((uint256,string,address,bytes,address,bytes))": FunctionFragment;
    "postNote4AddressLink((uint256,string,address,bytes,address,bytes),uint256,address,bytes32)": FunctionFragment;
    "postNote4AnyLink((uint256,string,address,bytes,address,bytes),uint256,string,bytes32)": FunctionFragment;
    "postNote4ERC721Link((uint256,string,address,bytes,address,bytes),uint256,address,uint256,bytes32)": FunctionFragment;
    "postNote4LinklistLink((uint256,string,address,bytes,address,bytes),uint256,uint256,bytes32)": FunctionFragment;
    "postNote4NoteLink((uint256,string,address,bytes,address,bytes),uint256,uint256,uint256,bytes32)": FunctionFragment;
    "postNote4ProfileLink((uint256,string,address,bytes,address,bytes),uint256,uint256,bytes32)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setHandle(uint256,string)": FunctionFragment;
    "setLinkModule4Address(address,address,bytes)": FunctionFragment;
    "setLinkModule4ERC721(address,uint256,address,bytes)": FunctionFragment;
    "setLinkModule4Linklist(uint256,address,bytes)": FunctionFragment;
    "setLinkModule4Note(uint256,uint256,address,bytes)": FunctionFragment;
    "setLinkModule4Profile(uint256,address,bytes)": FunctionFragment;
    "setLinklistUri(uint256,string)": FunctionFragment;
    "setMintModule4Note(uint256,uint256,address,bytes)": FunctionFragment;
    "setPrimaryProfileId(uint256)": FunctionFragment;
    "setProfileUri(uint256,string)": FunctionFragment;
    "setSocialToken(uint256,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unlinkAddress(uint256,address,bytes32)": FunctionFragment;
    "unlinkAny(uint256,string,bytes32)": FunctionFragment;
    "unlinkERC721(uint256,address,uint256,bytes32)": FunctionFragment;
    "unlinkLinklist(uint256,uint256,bytes32)": FunctionFragment;
    "unlinkNote(uint256,uint256,uint256,bytes32)": FunctionFragment;
    "unlinkProfile(uint256,uint256,bytes32)": FunctionFragment;
    "unlinkProfileLink(uint256,(uint256,uint256,bytes32),bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "attachLinklist"
      | "balanceOf"
      | "createProfile"
      | "createThenLinkProfile"
      | "detachLinklist"
      | "getApproved"
      | "getHandle"
      | "getLinkModule4Address"
      | "getLinkModule4ERC721"
      | "getLinkModule4Linklist"
      | "getLinkingProfileIds"
      | "getLinklistContract"
      | "getLinklistUri"
      | "getNote"
      | "getPrimaryProfileId"
      | "getProfile"
      | "getProfileByHandle"
      | "getProfileUri"
      | "getRevision"
      | "initialize"
      | "isApprovedForAll"
      | "isPrimaryProfile"
      | "linkAddress"
      | "linkAny"
      | "linkERC721"
      | "linkLinklist"
      | "linkNote"
      | "linkProfile"
      | "linkProfileLink"
      | "mintNote"
      | "name"
      | "ownerOf"
      | "postNote"
      | "postNote4AddressLink"
      | "postNote4AnyLink"
      | "postNote4ERC721Link"
      | "postNote4LinklistLink"
      | "postNote4NoteLink"
      | "postNote4ProfileLink"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setHandle"
      | "setLinkModule4Address"
      | "setLinkModule4ERC721"
      | "setLinkModule4Linklist"
      | "setLinkModule4Note"
      | "setLinkModule4Profile"
      | "setLinklistUri"
      | "setMintModule4Note"
      | "setPrimaryProfileId"
      | "setProfileUri"
      | "setSocialToken"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "unlinkAddress"
      | "unlinkAny"
      | "unlinkERC721"
      | "unlinkLinklist"
      | "unlinkNote"
      | "unlinkProfile"
      | "unlinkProfileLink"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attachLinklist",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [DataTypes.CreateProfileDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createThenLinkProfile",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "detachLinklist",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkModule4Address",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkModule4ERC721",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkModule4Linklist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkingProfileIds",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinklistContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLinklistUri",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimaryProfileId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileByHandle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileUri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPrimaryProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "linkAddress",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkAny",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkERC721",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkLinklist",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkNote",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkProfile",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkProfileLink",
    values: [BigNumberish, DataTypes.ProfileLinkStructStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNote",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postNote",
    values: [DataTypes.PostNoteDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "postNote4AddressLink",
    values: [DataTypes.PostNoteDataStruct, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "postNote4AnyLink",
    values: [DataTypes.PostNoteDataStruct, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "postNote4ERC721Link",
    values: [
      DataTypes.PostNoteDataStruct,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "postNote4LinklistLink",
    values: [
      DataTypes.PostNoteDataStruct,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "postNote4NoteLink",
    values: [
      DataTypes.PostNoteDataStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "postNote4ProfileLink",
    values: [
      DataTypes.PostNoteDataStruct,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setHandle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkModule4Address",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkModule4ERC721",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkModule4Linklist",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkModule4Note",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkModule4Profile",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinklistUri",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintModule4Note",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryProfileId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileUri",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSocialToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkAddress",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkAny",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkERC721",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkLinklist",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkNote",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkProfile",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkProfileLink",
    values: [BigNumberish, DataTypes.ProfileLinkStructStruct, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attachLinklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createThenLinkProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "detachLinklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHandle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLinkModule4Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkModule4ERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkModule4Linklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkingProfileIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinklistContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinklistUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrimaryProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProfileByHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPrimaryProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkAny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "linkERC721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkLinklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkNote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkProfileLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintNote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postNote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postNote4AddressLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postNote4AnyLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postNote4ERC721Link",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postNote4LinklistLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postNote4NoteLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postNote4ProfileLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHandle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLinkModule4Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkModule4ERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkModule4Linklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkModule4Note",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkModule4Profile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinklistUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintModule4Note",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfileUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSocialToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlinkAny", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlinkERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkLinklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlinkNote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlinkProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkProfileLink",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "BaseInitialized(string,string,uint256)": EventFragment;
    "LinkAddress(uint256,address,bytes32,uint256)": EventFragment;
    "LinkAny(uint256,string,bytes32,uint256)": EventFragment;
    "LinkERC721(uint256,address,uint256,bytes32,uint256)": EventFragment;
    "LinkLinklist(uint256,uint256,bytes32,uint256)": EventFragment;
    "LinkNote(uint256,uint256,uint256,bytes32,uint256)": EventFragment;
    "LinkProfile(address,uint256,uint256,bytes32,uint256)": EventFragment;
    "LinkProfileLink(uint256,bytes32,uint256,uint256,bytes32)": EventFragment;
    "LinklistNFTInitialized(uint256)": EventFragment;
    "MintNFTInitialized(uint256,uint256,uint256)": EventFragment;
    "MintNote(address,uint256,uint256,uint256,bytes,uint256)": EventFragment;
    "ProfileCreated(uint256,address,address,string,uint256)": EventFragment;
    "SetHandle(address,uint256,string)": EventFragment;
    "SetLinkModule4Address(address,address,bytes,uint256)": EventFragment;
    "SetLinkModule4ERC721(address,uint256,address,bytes,uint256)": EventFragment;
    "SetLinkModule4Linklist(uint256,address,bytes,uint256)": EventFragment;
    "SetLinkModule4Note(uint256,uint256,address,bytes,uint256)": EventFragment;
    "SetLinkModule4Profile(uint256,address,bytes,uint256)": EventFragment;
    "SetMintModule4Note(uint256,uint256,address,bytes,uint256)": EventFragment;
    "SetPrimaryProfileId(address,uint256)": EventFragment;
    "SetSocialToken(address,uint256,address)": EventFragment;
    "UninkLinklist(uint256,uint256,bytes32,uint256)": EventFragment;
    "UnlinkAddress(uint256,address,bytes32)": EventFragment;
    "UnlinkAny(uint256,string,bytes32)": EventFragment;
    "UnlinkERC721(uint256,address,uint256,bytes32,uint256)": EventFragment;
    "UnlinkNote(uint256,uint256,uint256,bytes32,uint256)": EventFragment;
    "UnlinkProfile(address,uint256,uint256,bytes32)": EventFragment;
    "UnlinkProfileLink(uint256,bytes32,uint256,uint256,bytes32)": EventFragment;
    "Web3EntryInitialized(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkAny"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkLinklist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkNote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkProfileLink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinklistNFTInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintNFTInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintNote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHandle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLinkModule4Address"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLinkModule4ERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLinkModule4Linklist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLinkModule4Note"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLinkModule4Profile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMintModule4Note"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPrimaryProfileId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSocialToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UninkLinklist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlinkAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlinkAny"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlinkERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlinkNote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlinkProfile"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlinkProfileLink"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Web3EntryInitialized"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface BaseInitializedEventObject {
  name: string;
  symbol: string;
  timestamp: BigNumber;
}
export type BaseInitializedEvent = TypedEvent<
  [string, string, BigNumber],
  BaseInitializedEventObject
>;

export type BaseInitializedEventFilter = TypedEventFilter<BaseInitializedEvent>;

export interface LinkAddressEventObject {
  fromProfileId: BigNumber;
  ethAddress: string;
  linkType: string;
  linklistId: BigNumber;
}
export type LinkAddressEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  LinkAddressEventObject
>;

export type LinkAddressEventFilter = TypedEventFilter<LinkAddressEvent>;

export interface LinkAnyEventObject {
  fromProfileId: BigNumber;
  toUri: string;
  linkType: string;
  linklistId: BigNumber;
}
export type LinkAnyEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  LinkAnyEventObject
>;

export type LinkAnyEventFilter = TypedEventFilter<LinkAnyEvent>;

export interface LinkERC721EventObject {
  fromProfileId: BigNumber;
  tokenAddress: string;
  toNoteId: BigNumber;
  linkType: string;
  linklistId: BigNumber;
}
export type LinkERC721Event = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber],
  LinkERC721EventObject
>;

export type LinkERC721EventFilter = TypedEventFilter<LinkERC721Event>;

export interface LinkLinklistEventObject {
  fromProfileId: BigNumber;
  toLinklistId: BigNumber;
  linkType: string;
  linklistId: BigNumber;
}
export type LinkLinklistEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  LinkLinklistEventObject
>;

export type LinkLinklistEventFilter = TypedEventFilter<LinkLinklistEvent>;

export interface LinkNoteEventObject {
  fromProfileId: BigNumber;
  toProfileId: BigNumber;
  toNoteId: BigNumber;
  linkType: string;
  linklistId: BigNumber;
}
export type LinkNoteEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber],
  LinkNoteEventObject
>;

export type LinkNoteEventFilter = TypedEventFilter<LinkNoteEvent>;

export interface LinkProfileEventObject {
  account: string;
  fromProfileId: BigNumber;
  toProfileId: BigNumber;
  linkType: string;
  linklistId: BigNumber;
}
export type LinkProfileEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, BigNumber],
  LinkProfileEventObject
>;

export type LinkProfileEventFilter = TypedEventFilter<LinkProfileEvent>;

export interface LinkProfileLinkEventObject {
  fromProfileId: BigNumber;
  linkType: string;
  plFromProfileId: BigNumber;
  plToProfileId: BigNumber;
  plLinkType: string;
}
export type LinkProfileLinkEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string],
  LinkProfileLinkEventObject
>;

export type LinkProfileLinkEventFilter = TypedEventFilter<LinkProfileLinkEvent>;

export interface LinklistNFTInitializedEventObject {
  timestamp: BigNumber;
}
export type LinklistNFTInitializedEvent = TypedEvent<
  [BigNumber],
  LinklistNFTInitializedEventObject
>;

export type LinklistNFTInitializedEventFilter =
  TypedEventFilter<LinklistNFTInitializedEvent>;

export interface MintNFTInitializedEventObject {
  profileId: BigNumber;
  noteId: BigNumber;
  timestamp: BigNumber;
}
export type MintNFTInitializedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  MintNFTInitializedEventObject
>;

export type MintNFTInitializedEventFilter =
  TypedEventFilter<MintNFTInitializedEvent>;

export interface MintNoteEventObject {
  to: string;
  profileId: BigNumber;
  noteId: BigNumber;
  tokenId: BigNumber;
  data: string;
  timestamp: BigNumber;
}
export type MintNoteEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, BigNumber],
  MintNoteEventObject
>;

export type MintNoteEventFilter = TypedEventFilter<MintNoteEvent>;

export interface ProfileCreatedEventObject {
  profileId: BigNumber;
  creator: string;
  to: string;
  handle: string;
  timestamp: BigNumber;
}
export type ProfileCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  ProfileCreatedEventObject
>;

export type ProfileCreatedEventFilter = TypedEventFilter<ProfileCreatedEvent>;

export interface SetHandleEventObject {
  account: string;
  profileId: BigNumber;
  newHandle: string;
}
export type SetHandleEvent = TypedEvent<
  [string, BigNumber, string],
  SetHandleEventObject
>;

export type SetHandleEventFilter = TypedEventFilter<SetHandleEvent>;

export interface SetLinkModule4AddressEventObject {
  account: string;
  linkModule: string;
  returnData: string;
  timestamp: BigNumber;
}
export type SetLinkModule4AddressEvent = TypedEvent<
  [string, string, string, BigNumber],
  SetLinkModule4AddressEventObject
>;

export type SetLinkModule4AddressEventFilter =
  TypedEventFilter<SetLinkModule4AddressEvent>;

export interface SetLinkModule4ERC721EventObject {
  tokenAddress: string;
  tokenId: BigNumber;
  linkModule: string;
  returnData: string;
  timestamp: BigNumber;
}
export type SetLinkModule4ERC721Event = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  SetLinkModule4ERC721EventObject
>;

export type SetLinkModule4ERC721EventFilter =
  TypedEventFilter<SetLinkModule4ERC721Event>;

export interface SetLinkModule4LinklistEventObject {
  linklistId: BigNumber;
  linkModule: string;
  returnData: string;
  timestamp: BigNumber;
}
export type SetLinkModule4LinklistEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  SetLinkModule4LinklistEventObject
>;

export type SetLinkModule4LinklistEventFilter =
  TypedEventFilter<SetLinkModule4LinklistEvent>;

export interface SetLinkModule4NoteEventObject {
  profileId: BigNumber;
  noteId: BigNumber;
  linkModule: string;
  returnData: string;
  timestamp: BigNumber;
}
export type SetLinkModule4NoteEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  SetLinkModule4NoteEventObject
>;

export type SetLinkModule4NoteEventFilter =
  TypedEventFilter<SetLinkModule4NoteEvent>;

export interface SetLinkModule4ProfileEventObject {
  profileId: BigNumber;
  linkModule: string;
  returnData: string;
  timestamp: BigNumber;
}
export type SetLinkModule4ProfileEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  SetLinkModule4ProfileEventObject
>;

export type SetLinkModule4ProfileEventFilter =
  TypedEventFilter<SetLinkModule4ProfileEvent>;

export interface SetMintModule4NoteEventObject {
  profileId: BigNumber;
  noteId: BigNumber;
  mintModule: string;
  returnData: string;
  timestamp: BigNumber;
}
export type SetMintModule4NoteEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  SetMintModule4NoteEventObject
>;

export type SetMintModule4NoteEventFilter =
  TypedEventFilter<SetMintModule4NoteEvent>;

export interface SetPrimaryProfileIdEventObject {
  account: string;
  profileId: BigNumber;
}
export type SetPrimaryProfileIdEvent = TypedEvent<
  [string, BigNumber],
  SetPrimaryProfileIdEventObject
>;

export type SetPrimaryProfileIdEventFilter =
  TypedEventFilter<SetPrimaryProfileIdEvent>;

export interface SetSocialTokenEventObject {
  account: string;
  profileId: BigNumber;
  tokenAddress: string;
}
export type SetSocialTokenEvent = TypedEvent<
  [string, BigNumber, string],
  SetSocialTokenEventObject
>;

export type SetSocialTokenEventFilter = TypedEventFilter<SetSocialTokenEvent>;

export interface UninkLinklistEventObject {
  fromProfileId: BigNumber;
  toLinklistId: BigNumber;
  linkType: string;
  linklistId: BigNumber;
}
export type UninkLinklistEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  UninkLinklistEventObject
>;

export type UninkLinklistEventFilter = TypedEventFilter<UninkLinklistEvent>;

export interface UnlinkAddressEventObject {
  fromProfileId: BigNumber;
  ethAddress: string;
  linkType: string;
}
export type UnlinkAddressEvent = TypedEvent<
  [BigNumber, string, string],
  UnlinkAddressEventObject
>;

export type UnlinkAddressEventFilter = TypedEventFilter<UnlinkAddressEvent>;

export interface UnlinkAnyEventObject {
  fromProfileId: BigNumber;
  toUri: string;
  linkType: string;
}
export type UnlinkAnyEvent = TypedEvent<
  [BigNumber, string, string],
  UnlinkAnyEventObject
>;

export type UnlinkAnyEventFilter = TypedEventFilter<UnlinkAnyEvent>;

export interface UnlinkERC721EventObject {
  fromProfileId: BigNumber;
  tokenAddress: string;
  toNoteId: BigNumber;
  linkType: string;
  linklistId: BigNumber;
}
export type UnlinkERC721Event = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber],
  UnlinkERC721EventObject
>;

export type UnlinkERC721EventFilter = TypedEventFilter<UnlinkERC721Event>;

export interface UnlinkNoteEventObject {
  fromProfileId: BigNumber;
  toProfileId: BigNumber;
  toNoteId: BigNumber;
  linkType: string;
  linklistId: BigNumber;
}
export type UnlinkNoteEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber],
  UnlinkNoteEventObject
>;

export type UnlinkNoteEventFilter = TypedEventFilter<UnlinkNoteEvent>;

export interface UnlinkProfileEventObject {
  account: string;
  fromProfileId: BigNumber;
  toProfileId: BigNumber;
  linkType: string;
}
export type UnlinkProfileEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  UnlinkProfileEventObject
>;

export type UnlinkProfileEventFilter = TypedEventFilter<UnlinkProfileEvent>;

export interface UnlinkProfileLinkEventObject {
  fromProfileId: BigNumber;
  linkType: string;
  plFromProfileId: BigNumber;
  plToProfileId: BigNumber;
  plLinkType: string;
}
export type UnlinkProfileLinkEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string],
  UnlinkProfileLinkEventObject
>;

export type UnlinkProfileLinkEventFilter =
  TypedEventFilter<UnlinkProfileLinkEvent>;

export interface Web3EntryInitializedEventObject {
  timestamp: BigNumber;
}
export type Web3EntryInitializedEvent = TypedEvent<
  [BigNumber],
  Web3EntryInitializedEventObject
>;

export type Web3EntryInitializedEventFilter =
  TypedEventFilter<Web3EntryInitializedEvent>;

export interface Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attachLinklist(
      linklistId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    createProfile(
      vars: DataTypes.CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createThenLinkProfile(
      fromProfileId: BigNumberish,
      to: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    detachLinklist(
      linklistId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkModule4Address(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkModule4Linklist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkingProfileIds(
      fromProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getLinklistContract(overrides?: CallOverrides): Promise<[string]>;

    getLinklistUri(
      profileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.NoteStructOutput]>;

    getPrimaryProfileId(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ProfileStructOutput]>;

    getProfileByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ProfileStructOutput]>;

    getProfileUri(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRevision(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _name: string,
      _symbol: string,
      _linklistContract: string,
      _mintNFTImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPrimaryProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    linkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkLinklist(
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkProfileLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.ProfileLinkStructStruct,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      to: string,
      mintModuleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    postNote(
      noteData: DataTypes.PostNoteDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postNote4AddressLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postNote4AnyLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postNote4ERC721Link(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postNote4LinklistLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postNote4NoteLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postNote4ProfileLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHandle(
      profileId: BigNumberish,
      newHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkModule4Address(
      account: string,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkModule4Linklist(
      linklistId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkModule4Profile(
      profileId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinklistUri(
      linklistId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrimaryProfileId(
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfileUri(
      profileId: BigNumberish,
      newUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSocialToken(
      profileId: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlinkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlinkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlinkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlinkLinklist(
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlinkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlinkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlinkProfileLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.ProfileLinkStructStruct,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attachLinklist(
    linklistId: BigNumberish,
    profileId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  createProfile(
    vars: DataTypes.CreateProfileDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createThenLinkProfile(
    fromProfileId: BigNumberish,
    to: string,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  detachLinklist(
    linklistId: BigNumberish,
    profileId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getHandle(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkModule4Address(
    account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkModule4ERC721(
    tokenAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkModule4Linklist(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkingProfileIds(
    fromProfileId: BigNumberish,
    linkType: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getLinklistContract(overrides?: CallOverrides): Promise<string>;

  getLinklistUri(
    profileId: BigNumberish,
    linkType: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getNote(
    profileId: BigNumberish,
    noteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.NoteStructOutput>;

  getPrimaryProfileId(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProfile(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.ProfileStructOutput>;

  getProfileByHandle(
    handle: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.ProfileStructOutput>;

  getProfileUri(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRevision(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _name: string,
    _symbol: string,
    _linklistContract: string,
    _mintNFTImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPrimaryProfile(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  linkAddress(
    fromProfileId: BigNumberish,
    ethAddress: string,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkAny(
    fromProfileId: BigNumberish,
    toUri: string,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkERC721(
    fromProfileId: BigNumberish,
    tokenAddress: string,
    tokenId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkLinklist(
    fromProfileId: BigNumberish,
    toLinkListId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkNote(
    fromProfileId: BigNumberish,
    toProfileId: BigNumberish,
    toNoteId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkProfile(
    fromProfileId: BigNumberish,
    toProfileId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkProfileLink(
    fromProfileId: BigNumberish,
    linkData: DataTypes.ProfileLinkStructStruct,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintNote(
    profileId: BigNumberish,
    noteId: BigNumberish,
    to: string,
    mintModuleData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  postNote(
    noteData: DataTypes.PostNoteDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postNote4AddressLink(
    noteData: DataTypes.PostNoteDataStruct,
    fromProfileId: BigNumberish,
    ethAddress: string,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postNote4AnyLink(
    noteData: DataTypes.PostNoteDataStruct,
    fromProfileId: BigNumberish,
    toUri: string,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postNote4ERC721Link(
    noteData: DataTypes.PostNoteDataStruct,
    fromProfileId: BigNumberish,
    tokenAddress: string,
    tokenId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postNote4LinklistLink(
    noteData: DataTypes.PostNoteDataStruct,
    fromProfileId: BigNumberish,
    toLinkListId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postNote4NoteLink(
    noteData: DataTypes.PostNoteDataStruct,
    fromProfileId: BigNumberish,
    toProfileId: BigNumberish,
    toNoteId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postNote4ProfileLink(
    noteData: DataTypes.PostNoteDataStruct,
    fromProfileId: BigNumberish,
    toProfileId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHandle(
    profileId: BigNumberish,
    newHandle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkModule4Address(
    account: string,
    linkModule: string,
    linkModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkModule4ERC721(
    tokenAddress: string,
    tokenId: BigNumberish,
    linkModule: string,
    linkModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkModule4Linklist(
    linklistId: BigNumberish,
    linkModule: string,
    linkModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkModule4Note(
    profileId: BigNumberish,
    noteId: BigNumberish,
    linkModule: string,
    linkModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkModule4Profile(
    profileId: BigNumberish,
    linkModule: string,
    linkModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinklistUri(
    linklistId: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintModule4Note(
    profileId: BigNumberish,
    noteId: BigNumberish,
    mintModule: string,
    mintModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrimaryProfileId(
    profileId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfileUri(
    profileId: BigNumberish,
    newUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSocialToken(
    profileId: BigNumberish,
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(profileId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlinkAddress(
    fromProfileId: BigNumberish,
    ethAddress: string,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlinkAny(
    fromProfileId: BigNumberish,
    toUri: string,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlinkERC721(
    fromProfileId: BigNumberish,
    tokenAddress: string,
    tokenId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlinkLinklist(
    fromProfileId: BigNumberish,
    toLinkListId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlinkNote(
    fromProfileId: BigNumberish,
    toProfileId: BigNumberish,
    toNoteId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlinkProfile(
    fromProfileId: BigNumberish,
    toProfileId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlinkProfileLink(
    fromProfileId: BigNumberish,
    linkData: DataTypes.ProfileLinkStructStruct,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attachLinklist(
      linklistId: BigNumberish,
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    createProfile(
      vars: DataTypes.CreateProfileDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createThenLinkProfile(
      fromProfileId: BigNumberish,
      to: string,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    detachLinklist(
      linklistId: BigNumberish,
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkModule4Address(
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkModule4Linklist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkingProfileIds(
      fromProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getLinklistContract(overrides?: CallOverrides): Promise<string>;

    getLinklistUri(
      profileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.NoteStructOutput>;

    getPrimaryProfileId(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.ProfileStructOutput>;

    getProfileByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.ProfileStructOutput>;

    getProfileUri(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRevision(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _linklistContract: string,
      _mintNFTImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPrimaryProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    linkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkLinklist(
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkProfileLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.ProfileLinkStructStruct,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mintNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      to: string,
      mintModuleData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    postNote(
      noteData: DataTypes.PostNoteDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postNote4AddressLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postNote4AnyLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postNote4ERC721Link(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postNote4LinklistLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postNote4NoteLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postNote4ProfileLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setHandle(
      profileId: BigNumberish,
      newHandle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkModule4Address(
      account: string,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkModule4Linklist(
      linklistId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkModule4Profile(
      profileId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinklistUri(
      linklistId: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrimaryProfileId(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfileUri(
      profileId: BigNumberish,
      newUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSocialToken(
      profileId: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkLinklist(
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkProfileLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.ProfileLinkStructStruct,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "BaseInitialized(string,string,uint256)"(
      name?: null,
      symbol?: null,
      timestamp?: null
    ): BaseInitializedEventFilter;
    BaseInitialized(
      name?: null,
      symbol?: null,
      timestamp?: null
    ): BaseInitializedEventFilter;

    "LinkAddress(uint256,address,bytes32,uint256)"(
      fromProfileId?: BigNumberish | null,
      ethAddress?: string | null,
      linkType?: null,
      linklistId?: null
    ): LinkAddressEventFilter;
    LinkAddress(
      fromProfileId?: BigNumberish | null,
      ethAddress?: string | null,
      linkType?: null,
      linklistId?: null
    ): LinkAddressEventFilter;

    "LinkAny(uint256,string,bytes32,uint256)"(
      fromProfileId?: BigNumberish | null,
      toUri?: null,
      linkType?: null,
      linklistId?: null
    ): LinkAnyEventFilter;
    LinkAny(
      fromProfileId?: BigNumberish | null,
      toUri?: null,
      linkType?: null,
      linklistId?: null
    ): LinkAnyEventFilter;

    "LinkERC721(uint256,address,uint256,bytes32,uint256)"(
      fromProfileId?: BigNumberish | null,
      tokenAddress?: string | null,
      toNoteId?: BigNumberish | null,
      linkType?: null,
      linklistId?: null
    ): LinkERC721EventFilter;
    LinkERC721(
      fromProfileId?: BigNumberish | null,
      tokenAddress?: string | null,
      toNoteId?: BigNumberish | null,
      linkType?: null,
      linklistId?: null
    ): LinkERC721EventFilter;

    "LinkLinklist(uint256,uint256,bytes32,uint256)"(
      fromProfileId?: BigNumberish | null,
      toLinklistId?: BigNumberish | null,
      linkType?: null,
      linklistId?: BigNumberish | null
    ): LinkLinklistEventFilter;
    LinkLinklist(
      fromProfileId?: BigNumberish | null,
      toLinklistId?: BigNumberish | null,
      linkType?: null,
      linklistId?: BigNumberish | null
    ): LinkLinklistEventFilter;

    "LinkNote(uint256,uint256,uint256,bytes32,uint256)"(
      fromProfileId?: BigNumberish | null,
      toProfileId?: BigNumberish | null,
      toNoteId?: BigNumberish | null,
      linkType?: null,
      linklistId?: null
    ): LinkNoteEventFilter;
    LinkNote(
      fromProfileId?: BigNumberish | null,
      toProfileId?: BigNumberish | null,
      toNoteId?: BigNumberish | null,
      linkType?: null,
      linklistId?: null
    ): LinkNoteEventFilter;

    "LinkProfile(address,uint256,uint256,bytes32,uint256)"(
      account?: string | null,
      fromProfileId?: BigNumberish | null,
      toProfileId?: BigNumberish | null,
      linkType?: null,
      linklistId?: null
    ): LinkProfileEventFilter;
    LinkProfile(
      account?: string | null,
      fromProfileId?: BigNumberish | null,
      toProfileId?: BigNumberish | null,
      linkType?: null,
      linklistId?: null
    ): LinkProfileEventFilter;

    "LinkProfileLink(uint256,bytes32,uint256,uint256,bytes32)"(
      fromProfileId?: BigNumberish | null,
      linkType?: BytesLike | null,
      plFromProfileId?: null,
      plToProfileId?: null,
      plLinkType?: null
    ): LinkProfileLinkEventFilter;
    LinkProfileLink(
      fromProfileId?: BigNumberish | null,
      linkType?: BytesLike | null,
      plFromProfileId?: null,
      plToProfileId?: null,
      plLinkType?: null
    ): LinkProfileLinkEventFilter;

    "LinklistNFTInitialized(uint256)"(
      timestamp?: null
    ): LinklistNFTInitializedEventFilter;
    LinklistNFTInitialized(timestamp?: null): LinklistNFTInitializedEventFilter;

    "MintNFTInitialized(uint256,uint256,uint256)"(
      profileId?: null,
      noteId?: null,
      timestamp?: null
    ): MintNFTInitializedEventFilter;
    MintNFTInitialized(
      profileId?: null,
      noteId?: null,
      timestamp?: null
    ): MintNFTInitializedEventFilter;

    "MintNote(address,uint256,uint256,uint256,bytes,uint256)"(
      to?: string | null,
      profileId?: BigNumberish | null,
      noteId?: BigNumberish | null,
      tokenId?: null,
      data?: null,
      timestamp?: null
    ): MintNoteEventFilter;
    MintNote(
      to?: string | null,
      profileId?: BigNumberish | null,
      noteId?: BigNumberish | null,
      tokenId?: null,
      data?: null,
      timestamp?: null
    ): MintNoteEventFilter;

    "ProfileCreated(uint256,address,address,string,uint256)"(
      profileId?: BigNumberish | null,
      creator?: string | null,
      to?: string | null,
      handle?: null,
      timestamp?: null
    ): ProfileCreatedEventFilter;
    ProfileCreated(
      profileId?: BigNumberish | null,
      creator?: string | null,
      to?: string | null,
      handle?: null,
      timestamp?: null
    ): ProfileCreatedEventFilter;

    "SetHandle(address,uint256,string)"(
      account?: string | null,
      profileId?: BigNumberish | null,
      newHandle?: null
    ): SetHandleEventFilter;
    SetHandle(
      account?: string | null,
      profileId?: BigNumberish | null,
      newHandle?: null
    ): SetHandleEventFilter;

    "SetLinkModule4Address(address,address,bytes,uint256)"(
      account?: string | null,
      linkModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetLinkModule4AddressEventFilter;
    SetLinkModule4Address(
      account?: string | null,
      linkModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetLinkModule4AddressEventFilter;

    "SetLinkModule4ERC721(address,uint256,address,bytes,uint256)"(
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null,
      linkModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetLinkModule4ERC721EventFilter;
    SetLinkModule4ERC721(
      tokenAddress?: string | null,
      tokenId?: BigNumberish | null,
      linkModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetLinkModule4ERC721EventFilter;

    "SetLinkModule4Linklist(uint256,address,bytes,uint256)"(
      linklistId?: BigNumberish | null,
      linkModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetLinkModule4LinklistEventFilter;
    SetLinkModule4Linklist(
      linklistId?: BigNumberish | null,
      linkModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetLinkModule4LinklistEventFilter;

    "SetLinkModule4Note(uint256,uint256,address,bytes,uint256)"(
      profileId?: BigNumberish | null,
      noteId?: BigNumberish | null,
      linkModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetLinkModule4NoteEventFilter;
    SetLinkModule4Note(
      profileId?: BigNumberish | null,
      noteId?: BigNumberish | null,
      linkModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetLinkModule4NoteEventFilter;

    "SetLinkModule4Profile(uint256,address,bytes,uint256)"(
      profileId?: BigNumberish | null,
      linkModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetLinkModule4ProfileEventFilter;
    SetLinkModule4Profile(
      profileId?: BigNumberish | null,
      linkModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetLinkModule4ProfileEventFilter;

    "SetMintModule4Note(uint256,uint256,address,bytes,uint256)"(
      profileId?: BigNumberish | null,
      noteId?: BigNumberish | null,
      mintModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetMintModule4NoteEventFilter;
    SetMintModule4Note(
      profileId?: BigNumberish | null,
      noteId?: BigNumberish | null,
      mintModule?: string | null,
      returnData?: null,
      timestamp?: null
    ): SetMintModule4NoteEventFilter;

    "SetPrimaryProfileId(address,uint256)"(
      account?: string | null,
      profileId?: BigNumberish | null
    ): SetPrimaryProfileIdEventFilter;
    SetPrimaryProfileId(
      account?: string | null,
      profileId?: BigNumberish | null
    ): SetPrimaryProfileIdEventFilter;

    "SetSocialToken(address,uint256,address)"(
      account?: string | null,
      profileId?: BigNumberish | null,
      tokenAddress?: string | null
    ): SetSocialTokenEventFilter;
    SetSocialToken(
      account?: string | null,
      profileId?: BigNumberish | null,
      tokenAddress?: string | null
    ): SetSocialTokenEventFilter;

    "UninkLinklist(uint256,uint256,bytes32,uint256)"(
      fromProfileId?: BigNumberish | null,
      toLinklistId?: BigNumberish | null,
      linkType?: null,
      linklistId?: BigNumberish | null
    ): UninkLinklistEventFilter;
    UninkLinklist(
      fromProfileId?: BigNumberish | null,
      toLinklistId?: BigNumberish | null,
      linkType?: null,
      linklistId?: BigNumberish | null
    ): UninkLinklistEventFilter;

    "UnlinkAddress(uint256,address,bytes32)"(
      fromProfileId?: BigNumberish | null,
      ethAddress?: string | null,
      linkType?: null
    ): UnlinkAddressEventFilter;
    UnlinkAddress(
      fromProfileId?: BigNumberish | null,
      ethAddress?: string | null,
      linkType?: null
    ): UnlinkAddressEventFilter;

    "UnlinkAny(uint256,string,bytes32)"(
      fromProfileId?: BigNumberish | null,
      toUri?: null,
      linkType?: null
    ): UnlinkAnyEventFilter;
    UnlinkAny(
      fromProfileId?: BigNumberish | null,
      toUri?: null,
      linkType?: null
    ): UnlinkAnyEventFilter;

    "UnlinkERC721(uint256,address,uint256,bytes32,uint256)"(
      fromProfileId?: BigNumberish | null,
      tokenAddress?: string | null,
      toNoteId?: BigNumberish | null,
      linkType?: null,
      linklistId?: null
    ): UnlinkERC721EventFilter;
    UnlinkERC721(
      fromProfileId?: BigNumberish | null,
      tokenAddress?: string | null,
      toNoteId?: BigNumberish | null,
      linkType?: null,
      linklistId?: null
    ): UnlinkERC721EventFilter;

    "UnlinkNote(uint256,uint256,uint256,bytes32,uint256)"(
      fromProfileId?: BigNumberish | null,
      toProfileId?: BigNumberish | null,
      toNoteId?: BigNumberish | null,
      linkType?: null,
      linklistId?: null
    ): UnlinkNoteEventFilter;
    UnlinkNote(
      fromProfileId?: BigNumberish | null,
      toProfileId?: BigNumberish | null,
      toNoteId?: BigNumberish | null,
      linkType?: null,
      linklistId?: null
    ): UnlinkNoteEventFilter;

    "UnlinkProfile(address,uint256,uint256,bytes32)"(
      account?: string | null,
      fromProfileId?: BigNumberish | null,
      toProfileId?: BigNumberish | null,
      linkType?: null
    ): UnlinkProfileEventFilter;
    UnlinkProfile(
      account?: string | null,
      fromProfileId?: BigNumberish | null,
      toProfileId?: BigNumberish | null,
      linkType?: null
    ): UnlinkProfileEventFilter;

    "UnlinkProfileLink(uint256,bytes32,uint256,uint256,bytes32)"(
      fromProfileId?: BigNumberish | null,
      linkType?: BytesLike | null,
      plFromProfileId?: null,
      plToProfileId?: null,
      plLinkType?: null
    ): UnlinkProfileLinkEventFilter;
    UnlinkProfileLink(
      fromProfileId?: BigNumberish | null,
      linkType?: BytesLike | null,
      plFromProfileId?: null,
      plToProfileId?: null,
      plLinkType?: null
    ): UnlinkProfileLinkEventFilter;

    "Web3EntryInitialized(uint256)"(
      timestamp?: null
    ): Web3EntryInitializedEventFilter;
    Web3EntryInitialized(timestamp?: null): Web3EntryInitializedEventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attachLinklist(
      linklistId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    createProfile(
      vars: DataTypes.CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createThenLinkProfile(
      fromProfileId: BigNumberish,
      to: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    detachLinklist(
      linklistId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkModule4Address(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkModule4Linklist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkingProfileIds(
      fromProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinklistContract(overrides?: CallOverrides): Promise<BigNumber>;

    getLinklistUri(
      profileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryProfileId(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileUri(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevision(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _linklistContract: string,
      _mintNFTImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPrimaryProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkLinklist(
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkProfileLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.ProfileLinkStructStruct,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      to: string,
      mintModuleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postNote(
      noteData: DataTypes.PostNoteDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postNote4AddressLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postNote4AnyLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postNote4ERC721Link(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postNote4LinklistLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postNote4NoteLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postNote4ProfileLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHandle(
      profileId: BigNumberish,
      newHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkModule4Address(
      account: string,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkModule4Linklist(
      linklistId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkModule4Profile(
      profileId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinklistUri(
      linklistId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrimaryProfileId(
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfileUri(
      profileId: BigNumberish,
      newUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSocialToken(
      profileId: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlinkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlinkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlinkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlinkLinklist(
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlinkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlinkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlinkProfileLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.ProfileLinkStructStruct,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attachLinklist(
      linklistId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createProfile(
      vars: DataTypes.CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createThenLinkProfile(
      fromProfileId: BigNumberish,
      to: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    detachLinklist(
      linklistId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkModule4Address(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkModule4Linklist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkingProfileIds(
      fromProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinklistContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinklistUri(
      profileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimaryProfileId(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileUri(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevision(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      _linklistContract: string,
      _mintNFTImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPrimaryProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkLinklist(
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkProfileLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.ProfileLinkStructStruct,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      to: string,
      mintModuleData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postNote(
      noteData: DataTypes.PostNoteDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postNote4AddressLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postNote4AnyLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postNote4ERC721Link(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postNote4LinklistLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postNote4NoteLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postNote4ProfileLink(
      noteData: DataTypes.PostNoteDataStruct,
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHandle(
      profileId: BigNumberish,
      newHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkModule4Address(
      account: string,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkModule4Linklist(
      linklistId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkModule4Profile(
      profileId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinklistUri(
      linklistId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrimaryProfileId(
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfileUri(
      profileId: BigNumberish,
      newUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSocialToken(
      profileId: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlinkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlinkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlinkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlinkLinklist(
      fromProfileId: BigNumberish,
      toLinkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlinkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlinkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlinkProfileLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.ProfileLinkStructStruct,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
