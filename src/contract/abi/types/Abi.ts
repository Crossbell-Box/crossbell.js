/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace DataTypes {
  export type CreateProfileDataStruct = {
    to: string;
    handle: string;
    metadataUri: string;
    linkModule: string;
    linkModuleInitData: BytesLike;
  };

  export type CreateProfileDataStructOutput = [
    string,
    string,
    string,
    string,
    string
  ] & {
    to: string;
    handle: string;
    metadataUri: string;
    linkModule: string;
    linkModuleInitData: string;
  };

  export type LinkDataStruct = {
    linkListId: BigNumberish;
    linkType: BytesLike;
    linkTargetType: BigNumberish;
    content: BytesLike;
  };

  export type LinkDataStructOutput = [BigNumber, string, BigNumber, string] & {
    linkListId: BigNumber;
    linkType: string;
    linkTargetType: BigNumber;
    content: string;
  };

  export type ProfileStruct = {
    profileId: BigNumberish;
    handle: string;
    metadataUri: string;
    noteCount: BigNumberish;
    socialToken: string;
    linkModule: string;
  };

  export type ProfileStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string,
    string
  ] & {
    profileId: BigNumber;
    handle: string;
    metadataUri: string;
    noteCount: BigNumber;
    socialToken: string;
    linkModule: string;
  };

  export type PostNoteDataStruct = {
    profileId: BigNumberish;
    contentUri: string;
    linkModule: string;
    linkModuleInitData: BytesLike;
    mintModule: string;
    mintModuleInitData: BytesLike;
  };

  export type PostNoteDataStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    string
  ] & {
    profileId: BigNumber;
    contentUri: string;
    linkModule: string;
    linkModuleInitData: string;
    mintModule: string;
    mintModuleInitData: string;
  };
}

export interface AbiInterface extends utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "createProfile((address,string,string,address,bytes))": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getHandle(uint256)": FunctionFragment;
    "getLinkListUri(uint256,bytes32)": FunctionFragment;
    "getLinkModule4Address(address)": FunctionFragment;
    "getLinkModule4ERC721(address,uint256)": FunctionFragment;
    "getLinkModule4Link((uint256,bytes32,uint256,bytes))": FunctionFragment;
    "getLinkModule4Linklist(uint256)": FunctionFragment;
    "getLinkModule4Profile(uint256)": FunctionFragment;
    "getLinkingProfileIds(uint256,bytes32)": FunctionFragment;
    "getLinklistContract()": FunctionFragment;
    "getMintModule4Link((uint256,bytes32,uint256,bytes))": FunctionFragment;
    "getMintModule4Note(uint256,uint256)": FunctionFragment;
    "getNoteUri(uint256,uint256)": FunctionFragment;
    "getPrimaryProfileId(address)": FunctionFragment;
    "getProfile(uint256)": FunctionFragment;
    "getProfileByHandle(string)": FunctionFragment;
    "getProfileMetadataUri(uint256)": FunctionFragment;
    "initialize(string,string,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isPrimaryProfile(uint256)": FunctionFragment;
    "linkAddress(uint256,address,bytes32)": FunctionFragment;
    "linkAny(uint256,string,bytes32)": FunctionFragment;
    "linkERC721(uint256,address,uint256,bytes32)": FunctionFragment;
    "linkLink(uint256,(uint256,bytes32,uint256,bytes))": FunctionFragment;
    "linkLinklist(uint256,uint256,bytes32)": FunctionFragment;
    "linkNote(uint256,uint256,uint256,bytes32)": FunctionFragment;
    "linkProfile(uint256,uint256,bytes32)": FunctionFragment;
    "mintLink((uint256,bytes32,uint256,bytes),address)": FunctionFragment;
    "mintNote(uint256,uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "postNote((uint256,string,address,bytes,address,bytes))": FunctionFragment;
    "postNoteWithLink((uint256,string,address,bytes,address,bytes),(uint256,bytes32,uint256,bytes))": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setHandle(uint256,string)": FunctionFragment;
    "setLinkModule4Address(address,address,bytes)": FunctionFragment;
    "setLinkModule4ERC721(address,uint256,address,bytes)": FunctionFragment;
    "setLinkModule4Link((uint256,bytes32,uint256,bytes),address,bytes)": FunctionFragment;
    "setLinkModule4Linklist(uint256,address,bytes)": FunctionFragment;
    "setLinkModule4Note(uint256,uint256,address,bytes)": FunctionFragment;
    "setLinkModule4Profile(uint256,address,bytes)": FunctionFragment;
    "setLinklistUri(uint256,string)": FunctionFragment;
    "setMintModule4Link((uint256,bytes32,uint256,bytes),address,bytes)": FunctionFragment;
    "setMintModule4Note(uint256,uint256,address,bytes)": FunctionFragment;
    "setPrimaryLinklist(uint256,uint256)": FunctionFragment;
    "setPrimaryProfileId(uint256)": FunctionFragment;
    "setProfileMetadataUri(uint256,string)": FunctionFragment;
    "setSocialToken(uint256,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unlinkProfile(uint256,uint256,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approve"
      | "balanceOf"
      | "createProfile"
      | "getApproved"
      | "getHandle"
      | "getLinkListUri"
      | "getLinkModule4Address"
      | "getLinkModule4ERC721"
      | "getLinkModule4Link"
      | "getLinkModule4Linklist"
      | "getLinkModule4Profile"
      | "getLinkingProfileIds"
      | "getLinklistContract"
      | "getMintModule4Link"
      | "getMintModule4Note"
      | "getNoteUri"
      | "getPrimaryProfileId"
      | "getProfile"
      | "getProfileByHandle"
      | "getProfileMetadataUri"
      | "initialize"
      | "isApprovedForAll"
      | "isPrimaryProfile"
      | "linkAddress"
      | "linkAny"
      | "linkERC721"
      | "linkLink"
      | "linkLinklist"
      | "linkNote"
      | "linkProfile"
      | "mintLink"
      | "mintNote"
      | "name"
      | "ownerOf"
      | "postNote"
      | "postNoteWithLink"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setHandle"
      | "setLinkModule4Address"
      | "setLinkModule4ERC721"
      | "setLinkModule4Link"
      | "setLinkModule4Linklist"
      | "setLinkModule4Note"
      | "setLinkModule4Profile"
      | "setLinklistUri"
      | "setMintModule4Link"
      | "setMintModule4Note"
      | "setPrimaryLinklist"
      | "setPrimaryProfileId"
      | "setProfileMetadataUri"
      | "setSocialToken"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "unlinkProfile"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [DataTypes.CreateProfileDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkListUri",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkModule4Address",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkModule4ERC721",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkModule4Link",
    values: [DataTypes.LinkDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkModule4Linklist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkModule4Profile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinkingProfileIds",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinklistContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintModule4Link",
    values: [DataTypes.LinkDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintModule4Note",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNoteUri",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrimaryProfileId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileByHandle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileMetadataUri",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPrimaryProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "linkAddress",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkAny",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkERC721",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkLink",
    values: [BigNumberish, DataTypes.LinkDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "linkLinklist",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkNote",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkProfile",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLink",
    values: [DataTypes.LinkDataStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNote",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postNote",
    values: [DataTypes.PostNoteDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "postNoteWithLink",
    values: [DataTypes.PostNoteDataStruct, DataTypes.LinkDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setHandle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkModule4Address",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkModule4ERC721",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkModule4Link",
    values: [DataTypes.LinkDataStruct, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkModule4Linklist",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkModule4Note",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinkModule4Profile",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLinklistUri",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintModule4Link",
    values: [DataTypes.LinkDataStruct, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintModule4Note",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryLinklist",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryProfileId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileMetadataUri",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSocialToken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkProfile",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHandle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLinkListUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkModule4Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkModule4ERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkModule4Link",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkModule4Linklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkModule4Profile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinkingProfileIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinklistContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintModule4Link",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintModule4Note",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNoteUri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrimaryProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProfileByHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileMetadataUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPrimaryProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkAny", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "linkERC721", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "linkLink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkLinklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkNote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintLink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintNote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postNote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postNoteWithLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHandle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLinkModule4Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkModule4ERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkModule4Link",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkModule4Linklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkModule4Note",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinkModule4Profile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLinklistUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintModule4Link",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintModule4Note",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryLinklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfileMetadataUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSocialToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkProfile",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    createProfile(
      vars: DataTypes.CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkListUri(
      profileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkModule4Address(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkModule4Link(
      linkData: DataTypes.LinkDataStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkModule4Linklist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkModule4Profile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLinkingProfileIds(
      fromProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getLinklistContract(overrides?: CallOverrides): Promise<[string]>;

    getMintModule4Link(
      linkData: DataTypes.LinkDataStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMintModule4Note(
      profileId: BigNumberish,
      toNoteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNoteUri(
      profileId: BigNumberish,
      noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPrimaryProfileId(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ProfileStructOutput]>;

    getProfileByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<[DataTypes.ProfileStructOutput]>;

    getProfileMetadataUri(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _name: string,
      _symbol: string,
      _linkListContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPrimaryProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    linkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.LinkDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkLinklist(
      fromProfileId: BigNumberish,
      linkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintLink(
      linkData: DataTypes.LinkDataStruct,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    postNote(
      noteData: DataTypes.PostNoteDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postNoteWithLink(
      noteData: DataTypes.PostNoteDataStruct,
      linkData: DataTypes.LinkDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHandle(
      profileId: BigNumberish,
      newHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkModule4Address(
      account: string,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkModule4Link(
      linkData: DataTypes.LinkDataStruct,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkModule4Linklist(
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinkModule4Profile(
      profileId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLinklistUri(
      linkListId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintModule4Link(
      linkData: DataTypes.LinkDataStruct,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMintModule4Note(
      profileId: BigNumberish,
      toNoteId: BigNumberish,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrimaryLinklist(
      linkListId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrimaryProfileId(
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfileMetadataUri(
      profileId: BigNumberish,
      newMetadataUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSocialToken(
      profileId: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlinkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  createProfile(
    vars: DataTypes.CreateProfileDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getHandle(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkListUri(
    profileId: BigNumberish,
    linkType: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkModule4Address(
    account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkModule4ERC721(
    tokenAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkModule4Link(
    linkData: DataTypes.LinkDataStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkModule4Linklist(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkModule4Profile(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLinkingProfileIds(
    fromProfileId: BigNumberish,
    linkType: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getLinklistContract(overrides?: CallOverrides): Promise<string>;

  getMintModule4Link(
    linkData: DataTypes.LinkDataStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getMintModule4Note(
    profileId: BigNumberish,
    toNoteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNoteUri(
    profileId: BigNumberish,
    noteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPrimaryProfileId(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProfile(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DataTypes.ProfileStructOutput>;

  getProfileByHandle(
    handle: string,
    overrides?: CallOverrides
  ): Promise<DataTypes.ProfileStructOutput>;

  getProfileMetadataUri(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _name: string,
    _symbol: string,
    _linkListContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPrimaryProfile(
    profileId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  linkAddress(
    fromProfileId: BigNumberish,
    ethAddress: string,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkAny(
    fromProfileId: BigNumberish,
    toUri: string,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkERC721(
    fromProfileId: BigNumberish,
    tokenAddress: string,
    tokenId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkLink(
    fromProfileId: BigNumberish,
    linkData: DataTypes.LinkDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkLinklist(
    fromProfileId: BigNumberish,
    linkListId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkNote(
    fromProfileId: BigNumberish,
    toProfileId: BigNumberish,
    toNoteId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkProfile(
    fromProfileId: BigNumberish,
    toProfileId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintLink(
    linkData: DataTypes.LinkDataStruct,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintNote(
    profileId: BigNumberish,
    noteId: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  postNote(
    noteData: DataTypes.PostNoteDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postNoteWithLink(
    noteData: DataTypes.PostNoteDataStruct,
    linkData: DataTypes.LinkDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHandle(
    profileId: BigNumberish,
    newHandle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkModule4Address(
    account: string,
    linkModule: string,
    linkModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkModule4ERC721(
    tokenAddress: string,
    tokenId: BigNumberish,
    linkModule: string,
    linkModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkModule4Link(
    linkData: DataTypes.LinkDataStruct,
    linkModule: string,
    linkModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkModule4Linklist(
    tokenId: BigNumberish,
    linkModule: string,
    linkModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkModule4Note(
    profileId: BigNumberish,
    noteId: BigNumberish,
    linkModule: string,
    linkModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinkModule4Profile(
    profileId: BigNumberish,
    linkModule: string,
    linkModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLinklistUri(
    linkListId: BigNumberish,
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintModule4Link(
    linkData: DataTypes.LinkDataStruct,
    mintModule: string,
    mintModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMintModule4Note(
    profileId: BigNumberish,
    toNoteId: BigNumberish,
    mintModule: string,
    mintModuleInitData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrimaryLinklist(
    linkListId: BigNumberish,
    profileId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrimaryProfileId(
    profileId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfileMetadataUri(
    profileId: BigNumberish,
    newMetadataUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSocialToken(
    profileId: BigNumberish,
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(profileId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlinkProfile(
    fromProfileId: BigNumberish,
    toProfileId: BigNumberish,
    linkType: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    createProfile(
      vars: DataTypes.CreateProfileDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkListUri(
      profileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkModule4Address(
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkModule4Link(
      linkData: DataTypes.LinkDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkModule4Linklist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkModule4Profile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLinkingProfileIds(
      fromProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getLinklistContract(overrides?: CallOverrides): Promise<string>;

    getMintModule4Link(
      linkData: DataTypes.LinkDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getMintModule4Note(
      profileId: BigNumberish,
      toNoteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNoteUri(
      profileId: BigNumberish,
      noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPrimaryProfileId(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DataTypes.ProfileStructOutput>;

    getProfileByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<DataTypes.ProfileStructOutput>;

    getProfileMetadataUri(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _name: string,
      _symbol: string,
      _linkListContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPrimaryProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    linkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.LinkDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    linkLinklist(
      fromProfileId: BigNumberish,
      linkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mintLink(
      linkData: DataTypes.LinkDataStruct,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mintNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    postNote(
      noteData: DataTypes.PostNoteDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postNoteWithLink(
      noteData: DataTypes.PostNoteDataStruct,
      linkData: DataTypes.LinkDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setHandle(
      profileId: BigNumberish,
      newHandle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkModule4Address(
      account: string,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkModule4Link(
      linkData: DataTypes.LinkDataStruct,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkModule4Linklist(
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinkModule4Profile(
      profileId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setLinklistUri(
      linkListId: BigNumberish,
      uri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintModule4Link(
      linkData: DataTypes.LinkDataStruct,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMintModule4Note(
      profileId: BigNumberish,
      toNoteId: BigNumberish,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrimaryLinklist(
      linkListId: BigNumberish,
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrimaryProfileId(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfileMetadataUri(
      profileId: BigNumberish,
      newMetadataUri: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSocialToken(
      profileId: BigNumberish,
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    createProfile(
      vars: DataTypes.CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkListUri(
      profileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkModule4Address(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkModule4Link(
      linkData: DataTypes.LinkDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkModule4Linklist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkModule4Profile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinkingProfileIds(
      fromProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLinklistContract(overrides?: CallOverrides): Promise<BigNumber>;

    getMintModule4Link(
      linkData: DataTypes.LinkDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintModule4Note(
      profileId: BigNumberish,
      toNoteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNoteUri(
      profileId: BigNumberish,
      noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrimaryProfileId(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileMetadataUri(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _linkListContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPrimaryProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.LinkDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkLinklist(
      fromProfileId: BigNumberish,
      linkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintLink(
      linkData: DataTypes.LinkDataStruct,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postNote(
      noteData: DataTypes.PostNoteDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postNoteWithLink(
      noteData: DataTypes.PostNoteDataStruct,
      linkData: DataTypes.LinkDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHandle(
      profileId: BigNumberish,
      newHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkModule4Address(
      account: string,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkModule4Link(
      linkData: DataTypes.LinkDataStruct,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkModule4Linklist(
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinkModule4Profile(
      profileId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLinklistUri(
      linkListId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintModule4Link(
      linkData: DataTypes.LinkDataStruct,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMintModule4Note(
      profileId: BigNumberish,
      toNoteId: BigNumberish,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrimaryLinklist(
      linkListId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrimaryProfileId(
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfileMetadataUri(
      profileId: BigNumberish,
      newMetadataUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSocialToken(
      profileId: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlinkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createProfile(
      vars: DataTypes.CreateProfileDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHandle(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkListUri(
      profileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkModule4Address(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkModule4Link(
      linkData: DataTypes.LinkDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkModule4Linklist(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkModule4Profile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinkingProfileIds(
      fromProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLinklistContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintModule4Link(
      linkData: DataTypes.LinkDataStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintModule4Note(
      profileId: BigNumberish,
      toNoteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNoteUri(
      profileId: BigNumberish,
      noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrimaryProfileId(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileByHandle(
      handle: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileMetadataUri(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      _linkListContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPrimaryProfile(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkAddress(
      fromProfileId: BigNumberish,
      ethAddress: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkAny(
      fromProfileId: BigNumberish,
      toUri: string,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkERC721(
      fromProfileId: BigNumberish,
      tokenAddress: string,
      tokenId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkLink(
      fromProfileId: BigNumberish,
      linkData: DataTypes.LinkDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkLinklist(
      fromProfileId: BigNumberish,
      linkListId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkNote(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      toNoteId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintLink(
      linkData: DataTypes.LinkDataStruct,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintNote(
      profileId: BigNumberish,
      noteId: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postNote(
      noteData: DataTypes.PostNoteDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postNoteWithLink(
      noteData: DataTypes.PostNoteDataStruct,
      linkData: DataTypes.LinkDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHandle(
      profileId: BigNumberish,
      newHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkModule4Address(
      account: string,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkModule4ERC721(
      tokenAddress: string,
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkModule4Link(
      linkData: DataTypes.LinkDataStruct,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkModule4Linklist(
      tokenId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkModule4Note(
      profileId: BigNumberish,
      noteId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinkModule4Profile(
      profileId: BigNumberish,
      linkModule: string,
      linkModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLinklistUri(
      linkListId: BigNumberish,
      uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintModule4Link(
      linkData: DataTypes.LinkDataStruct,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMintModule4Note(
      profileId: BigNumberish,
      toNoteId: BigNumberish,
      mintModule: string,
      mintModuleInitData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrimaryLinklist(
      linkListId: BigNumberish,
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrimaryProfileId(
      profileId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfileMetadataUri(
      profileId: BigNumberish,
      newMetadataUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSocialToken(
      profileId: BigNumberish,
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      profileId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlinkProfile(
      fromProfileId: BigNumberish,
      toProfileId: BigNumberish,
      linkType: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
